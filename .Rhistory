library(ggplot2)
library(ROSE)
## Carregando os dados
# Carrega o dataset antes da transformacao (baixado do Azure ML)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
#### Análise Exploratória para Engenharia de Atributos em Variáveis Numéricas
## Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
## Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
#### Aplicando Engenharia de Atributos
# Carregando funções
source("src/ClassTools.R")
## Criando 3 novas variáveis que serão transformadas de variáveis numéricas para variáveis categórias utilizando duas formas
# Forma 1 (Intervalar - Usando Função do script ClassTools )
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
head(df)
str(df)
summary(df)
# Forma 2 (Discreta - Usando Função criada neste Script)
criar_categorias <- function(variavel, num_categorias) {
# Criar breakpoints para dividir a variável em categorias
breakpoints <- quantile(variavel, probs = seq(0, 1, length.out = num_categorias + 1))
# Criar categorias
categorias <- cut(variavel, breaks = breakpoints, labels = seq(1, num_categorias), include.lowest = TRUE)
return(categorias)
}
num_categorias <- 5
df$Duration_Categoria <- criar_categorias(df$Duration, num_categorias)
df$CreditAmount_Categoria <- criar_categorias(df$CreditAmount, num_categorias)
df$Age_Categoria <- criar_categorias(df$Age, num_categorias)
head(df)
str(df)
summary(df)
# Forma 1 (Utilizando função de ClassTools)
df_balanceado1 <- df
df_balanceado1 <- df_balanceado1[, !(names(df_balanceado1) %in% c("Duration", "CreditAmount", "Age",
"Duration_Categoria", "CreditAmount_Categoria", "Age_Categoria"))]
df_balanceado1 <- equ.Frame(df_balanceado1, 2)
# Forma 2 (Utilizando pacote ROSE)
df_balanceado2 <- df
df_balanceado2 <- df_balanceado2[, !(names(df_balanceado2) %in% c("Duration", "CreditAmount", "Age",
"Duration_Categoria", "CreditAmount_Categoria", "Age_Categoria"))]
df_balanceado2 <- ROSE(CreditStatus ~ .,  data = df_balanceado2, seed = 123, N = 2 * table(df_balanceado2$CreditStatus)[[2]])
df_balanceado2 <- df_balanceado2$data
df <- df_balanceado1
df2 <- df_balanceado2
summary(df)
summary(df2)
library(randomForest)
modelo <- randomForest( CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = Credit,
ntree = 100, nodesize = 10, importance = T)
modelo <- randomForest( df ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = Credit,
ntree = 100, nodesize = 10, importance = T)
modelo <- randomForest( CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = df,
ntree = 100, nodesize = 10, importance = T)
View(df)
modelo <- randomForest( CreditStatus ~ .
- Duration_f
- Age
- CreditAmount_f
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = df,
ntree = 100, nodesize = 10, importance = T)
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco")
getwd()
## Carregando Pacotes
library(dplyr)
library(ggplot2)
library(ROSE)
library(randomForest)
#### Carregando e Convertendo os Dados
## Carrega o dataset antes da transformacao (baixado do Azure ML)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
#### Análise Exploratória para Engenharia de Atributos em Variáveis Numéricas
## Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
## Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
#### Aplicando Engenharia de Atributos
# Carregando funções
source("src/ClassTools.R")
## Criando 3 novas variáveis que serão transformadas de variáveis numéricas para variáveis categórias utilizando duas formas
# Forma 1 (Intervalar - Usando Função do script ClassTools )
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
head(df)
str(df)
summary(df)
# Forma 2 (Discreta - Usando Função criada neste Script)
criar_categorias <- function(variavel, num_categorias) {
# Criar breakpoints para dividir a variável em categorias
breakpoints <- quantile(variavel, probs = seq(0, 1, length.out = num_categorias + 1))
# Criar categorias
categorias <- cut(variavel, breaks = breakpoints, labels = seq(1, num_categorias), include.lowest = TRUE)
return(categorias)
}
num_categorias <- 5
df$Duration_Categoria <- criar_categorias(df$Duration, num_categorias)
df$CreditAmount_Categoria <- criar_categorias(df$CreditAmount, num_categorias)
df$Age_Categoria <- criar_categorias(df$Age, num_categorias)
head(df)
str(df)
summary(df)
# Forma 1 (Utilizando função de ClassTools - duplicando linhas)
df_balanceado1 <- df
df_balanceado1 <- equ.Frame(df_balanceado1, 2)
# Forma 2 (Utilizando pacote ROSE - removendo linhas)
df_balanceado2 <- df
df_balanceado2 <- df_balanceado2[, !(names(df_balanceado2) %in% c("Duration", "CreditAmount", "Age",
"Duration_Categoria", "CreditAmount_Categoria", "Age_Categoria"))]
df_balanceado2 <- ROSE(CreditStatus ~ .,  data = df_balanceado2, seed = 123, N = 2 * table(df_balanceado2$CreditStatus)[[2]])
df_balanceado2 <- df_balanceado2$data
df <- df_balanceado1
df2 <- df_balanceado2
modelo <- randomForest( CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = df,
ntree = 100, nodesize = 10, importance = T)
View(df)
modelo <- randomForest( CreditStatus ~ .,
data = df,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)
outFrame <- serList(list(credit.model = modelo))
outFrame
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco")
getwd()
## Carregando Pacotes
library(dplyr)
library(ggplot2)
library(ROSE)
library(randomForest)
#### Carregando e Convertendo os Dados
## Carrega o dataset antes da transformacao (baixado do Azure ML)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
#### Análise Exploratória para Engenharia de Atributos em Variáveis Numéricas
## Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
## Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
#### Aplicando Engenharia de Atributos
# Carregando funções
source("src/ClassTools.R")
## Criando 3 novas variáveis que serão transformadas de variáveis numéricas para variáveis categórias utilizando duas formas
# Forma 1 (Intervalar - Usando Função do script ClassTools )
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
head(df)
str(df)
summary(df)
# Forma 1 (Utilizando função de ClassTools - duplicando linhas)
df_balanceado1 <- df
df_balanceado1 <- equ.Frame(df_balanceado1, 2)
df <- df_balanceado1
modelo <- randomForest( CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = Credit,
ntree = 100, nodesize = 10, importance = T)
modelo <- randomForest( CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_f
- OtherInstalments,
data = df,
ntree = 100, nodesize = 10, importance = T)
modelo <- randomForest( CreditStatus ~ .,
data = df,
ntree = 100, nodesize = 10, importance = T)
# Visualizando por números
print(modelo$importance)
# Visualizando por gráfico (2 formas)
varImpPlot(modelo)                                                                 # forma 1 (quanto mais a direita melhor)
barplot(varImportance[, 1], main = "Importância das Variáveis", col = "skyblue")   # forma 2
barplot(modelo$importance[, 1], main = "Importância das Variáveis", col = "skyblue")   # forma 2
barplot(modelo$importance[, 1], main = "Importância das Variáveis", col = "skyblue")   # forma 2
barplot(modelo$importance[order(-modelo$importance[, 1]), 1], main = "Importância das Variáveis", col = "skyblue")
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],                          # forma 3 (ordenando forma 2)
main = "Importância das Variáveis", col = "skyblue")
modelo <- randomForest(CreditStatus ~ .,
data = df,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)                                                                     # forma 1 (quanto mais a direita melhor)
varImpPlot(modelo)                                                                     # forma 1 (quanto mais a direita melhor)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount,
data = df,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)                                                                     # forma 1 (quanto mais a direita melhor)
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],                          # forma 3 (ordenando forma 2)
main = "Importância das Variáveis", col = "skyblue")
varImpPlot(modelo)                                                                     # forma 1 (quanto mais a direita melhor)
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],                          # forma 3 (ordenando forma 2)
main = "Importância das Variáveis", col = "skyblue")
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],
main = "Importância das Variáveis", col = "skyblue",
names.arg = rownames(modelo$importance))
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],
main = "Importância das Variáveis", col = "skyblue",
names.arg = rownames(modelo$importance),
las = 2)  # rotação de 90 graus
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],
main = "Importância das Variáveis", col = "skyblue",
names.arg = rownames(modelo$importance),
las = 2,  # rotação de 90 graus
cex.names = 0.8)  # ajuste o valor conforme necessário
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],
main = "Importância das Variáveis", col = "skyblue",
names.arg = rownames(modelo$importance),
las = 2,  # rotação de 90 graus
cex.names = 0.6)  # ajuste o valor conforme necessário
barplot(modelo$importance[order(-modelo$importance[, 1]), 1],
main = "Importância das Variáveis", col = "skyblue",
names.arg = rownames(modelo$importance),
las = 2,          # exibe nome das variáveis de forma vertical
cex.names = 0.5)  # tamanho da fonte dos nomes das variáveis
importancia_ordenada <- modelo$importance[order(-modelo$importance[, 1]), , drop = FALSE]
# Cria um dataframe para facilitar a manipulação dos dados
df_importancia <- data.frame(
Variavel = rownames(importancia_ordenada),
Importancia = importancia_ordenada[, 1]
)
# Cria o gráfico usando ggplot2
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 8))
# Cria o gráfico usando ggplot2
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
barplot(modelo$importance[, 1], main = "Importância das Variáveis", col = "skyblue")   # forma 2
View(df_importancia)
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
names(df)
modelo <- randomForest(CreditStatus ~ CheckingAcctStat + Duration_f + CreditHistory
+ SavingsBonds + CreditAmount_f + Property + Purpose,
data = df,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)                                                                        # forma 1 (quanto mais a direita melhor)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount,
data = df,
ntree = 100, nodesize = 10, importance = T)
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
modelo <- randomForest(CreditStatus ~
CheckingAcctStat + Duration_f + CreditHistory + SavingsBonds +
CreditAmount_f + Property + Employment + Purpose,
data = df,
ntree = 100, nodesize = 10, importance = T)
varImpPlot(modelo)                                                                        # forma 1 (quanto mais a direita melhor)
barplot(modelo$importance[, 1], main = "Importância das Variáveis", col = "skyblue")      # forma 2
importancia_ordenada <- modelo$importance[order(-modelo$importance[, 1]), , drop = FALSE] # forma 3 (profissional)
df_importancia <- data.frame(
Variavel = rownames(importancia_ordenada),
Importancia = importancia_ordenada[, 1]
)
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
#### Seleção de Variáveis (Feature Selection)
## Criando Modelo (Utilizando RandomForest - pode ser aplicada tanto em Regressão como Classificação)
# - para este tipo de problema (técnica de feature selecion o atributo "importante = TRUE" precsa estar)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount,
data = df,
ntree = 100, nodesize = 10, importance = T)
modelo
summary(modelo)
str(modelo)
#### Seleção de Variáveis (Feature Selection)
## Criando Modelo (Utilizando RandomForest - pode ser aplicada tanto em Regressão como Classificação)
# - para este tipo de problema (técnica de feature selecion o atributo "importante = TRUE" precsa estar)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount,
data = df,
ntree = 100, nodesize = 10, importance = T)
# Visualizando por números
print(modelo$importance)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat + Duration_f + CreditHistory + SavingsBonds +
CreditAmount_f + Property + Employment + Purpose,
data = df,
ntree = 100, nodesize = 10, importance = T)
# Visualizando por números
print(modelo$importance)
# Visualizando Modelo Por Gráficos
# forma 1 (quanto mais a direita melhor)
varImpPlot(modelo)
# forma 2 (quando tem poucas variáveis)
barplot(modelo$importance[, 1], main = "Importância das Variáveis", col = "skyblue")
# forma 3 (usando ggplot, método mais profissional)
importancia_ordenada <- modelo$importance[order(-modelo$importance[, 1]), , drop = FALSE]
df_importancia <- data.frame(
Variavel = rownames(importancia_ordenada),
Importancia = importancia_ordenada[, 1]
)
ggplot(df_importancia, aes(x = reorder(Variavel, -Importancia), y = Importancia)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Importância das Variáveis", x = "Variável", y = "Importância") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1, size = 10))
# Cross Tabulation
table(df$CreditStatus)
