setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/Projeto_-_Gerador_de_Imagens_com_OpenIA_-_ChatGPT")
getwd()
# Carregando pacotes
library(shiny)
library(httr)
library(shinyjs)
# Configurar sua chave da API OpenAI GPT-3
OPENAI_API_KEY <- "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"
# Define a função para gerar a imagem com base no prompt
generate_image <- function(prompt) {
# URL da API para criar imagens
url <- "https://api.openai.com/v1/images/generations"
# Dados do corpo da solicitação
data <- list(
"model" = "dall-e-3",
"prompt" = prompt,
"n" = 1,
"size" = "1024x1024"
)
# Fazer a solicitação POST para a API OpenAI
response <- POST(
url,
add_headers("Content-Type" = "application/json", "Authorization" = paste("Bearer", OPENAI_API_KEY)),
body = data,
encode = "json"
)
# Verificar se a resposta foi bem-sucedida
if (http_status(response)$category == "Success") {
# Extrair os dados da resposta
response_data <- content(response, "parsed")
# Retorna a URL da imagem gerada
return(response_data$data[[1]]$url)
} else {
cat("Erro ao chamar a API OpenAI GPT-3.\n")
return(NULL)
}
}
# Define a interface da aplicação Shiny
ui <- fluidPage(
useShinyjs(),  # Ativa a extensão shinyjs
tags$head(
tags$style(HTML("
.sidebar {
background-color: #f8f9fa;
padding: 10px;
}
body {
background-color: #f8f9fa;
padding-top: 10px;
}
"))
),
tags$h1("Gerador de Imagens OpenAI GPT-3", style = "text-align: center; margin-bottom: 35px;"),  # Adiciona um título centralizado
sidebarLayout(
sidebarPanel(
h4("Configurações:", style = "margin-bottom: 20px;"),  # Ajusta a margem abaixo do título
selectInput("promptMenu", "Exemplos de prompt:",
choices = c("Gerar imagem de um gato fofo",
"Gerar imagem de uma paisagem surreal",
"Gerar imagem de um retrato abstrato"),
selected = "Gerar imagem de um gato fofo"),
br(),
textInput("customPrompt", "Ou digite seu próprio prompt:"),
br(),
actionButton("generateBtn", "Gerar Imagem", class = "btn-primary"),
br(),
div(id = "loadingMessage", style = "text-align: center; color: blue;"),
div(id = "imageLoadedMessage", style = "text-align: center; color: green; display: none;", "Imagem Carregada!")
),
mainPanel(
h4("Imagem Gerada", style = "text-align: center;"),
uiOutput("imageOutput")
)
)
)
# Define a lógica do servidor Shiny
server <- function(input, output, session) {
# Função reativa para gerar a imagem quando o botão for clicado
generated_image <- eventReactive(input$generateBtn, {
shinyjs::disable("generateBtn")  # Desabilita o botão
shinyjs::html("loadingMessage", "Gerando imagem...")  # Exibe a mensagem de carregamento
if (!is.null(input$customPrompt) && input$customPrompt != "") {
prompt <- input$customPrompt
} else {
prompt <- input$promptMenu
}
img <- generate_image(prompt)
shinyjs::enable("generateBtn")  # Habilita o botão após o término do processo
shinyjs::html("loadingMessage", "")  # Oculta a mensagem de carregamento
shinyjs::show("imageLoadedMessage")  # Exibe a mensagem de imagem carregada
img  # Retorna a imagem
})
# Renderiza a imagem gerada na interface
output$imageOutput <- renderUI({
img_url <- generated_image()
if (!is.null(img_url)) {
img_tag <- tags$img(src = img_url, width = 800, height = 600)
return(img_tag)
} else {
return(NULL)
}
})
}
shinyApp(ui, server)
# Configurando o diretório de trabalho
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco")
getwd()
## Carregando Pacotes
setwd("~/Desktop/DataScience/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/15.Projeto-de-Classificação-com-R-e-Azure-ML_-_Risco_de_Credito_Clientes_Banco")
getwd()
# Carrega o dataset antes da transformacao
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
View(df)
str(df)
## Carregando os dados
# Carrega o dataset antes da transformacao (baixado do Azure ML)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
str(df)
summary(df)
dim(df)
str(df)
## Carregando Pacotes
library(dplyr)
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
colunas_chr
# Converta as variáveis do tipo caractere para fatores
df <- mutate_if(df, colunas_chr, as.factor)
str(df)
summary(df)
str(df)
df$X1.1 <- as.factor(df$X1.1)
str(df)
summary(df)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
# Verificar a contagem de valores em cada variável
contagem_valores <- lapply(df, table)
# Exibir a contagem de valores para cada variável
for (i in seq_along(contagem_valores)) {
cat("Variável:", names(contagem_valores)[i], "\n")
print(contagem_valores[[i]])
cat("\n")
}
library(dplyr)
## Carregando os dados
# Carrega o dataset antes da transformacao (baixado do Azure ML)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
summary(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
# Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
# Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
## Engenharia de Atributos em Variáveis Numéricas
# Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
# Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
str(df)
summary(df)
# Balancear o número de casos positivos e negativos
source("src/ClassTools.R")
# Balancear o número de casos positivos e negativos
df <- equ.Frame(df, 2)
summary(df)
# Transformando variáveis numéricas em variáveis categóricas
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
str(df)
summary(df)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
# Carregando funções
source("src/ClassTools.R")
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
View(df)
str(df)
summary(df)
criar_categorias <- function(variavel, num_categorias) {
# Criar breakpoints para dividir a variável em categorias
breakpoints <- quantile(variavel, probs = seq(0, 1, length.out = num_categorias + 1))
# Criar categorias
categorias <- cut(variavel, breaks = breakpoints, labels = seq(1, num_categorias), include.lowest = TRUE)
return(categorias)
}
# Especificar o número de categorias desejado
num_categorias <- 5
df$Duration_Categoria <- criar_categorias(df$Duration, num_categorias)
df$CreditAmount_Categoria <- criar_categorias(df$CreditAmount, num_categorias)
df$Age_Categoria <- criar_categorias(df$Age, num_categorias)
# Visualizar o resultado
head(df[c("Duration", "Duration_Categoria", "CreditAmount", "CreditAmount_Categoria", "Age", "Age_Categoria")])
summary(df)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
## Análise Exploratória (Engenharia de Atributos em Variáveis Numéricas)
# Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
# Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
## Aplicando Engenharia de Atributos em Variáveis Numéricas
# Carregando funções
source("src/ClassTools.R")
# Forma 1
# Criando 3 novas variáveis que foram transformadas de variáveis numéricas para variáveis categóricas com as funções de ClassTools.R
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
summary(df)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
## Análise Exploratória (Engenharia de Atributos em Variáveis Numéricas)
# Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
# Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
## Aplicando Engenharia de Atributos em Variáveis Numéricas
# Carregando funções
source("src/ClassTools.R")
# Forma 1
# Criando 3 novas variáveis que foram transformadas de variáveis numéricas para variáveis categóricas com as funções de ClassTools.R
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
# Carrega o dataset antes da transformacao (baixado do Azure ML)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
## Análise Exploratória (Engenharia de Atributos em Variáveis Numéricas)
# Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
# Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
## Aplicando Engenharia de Atributos em Variáveis Numéricas
# Carregando funções
source("src/ClassTools.R")
# Forma 1
# Criando 3 novas variáveis que foram transformadas de variáveis numéricas para variáveis categóricas com as funções de ClassTools.R
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
# Forma 2
# Criando 3 novas variáveis que foram transformadas de variáveis numéricas para variáveis categóricas aqui
# Definir função para criar categorias
criar_categorias <- function(variavel, num_categorias) {
# Criar breakpoints para dividir a variável em categorias
breakpoints <- quantile(variavel, probs = seq(0, 1, length.out = num_categorias + 1))
# Criar categorias
categorias <- cut(variavel, breaks = breakpoints, labels = seq(1, num_categorias), include.lowest = TRUE)
return(categorias)
}
# Especificar o número de categorias desejado
num_categorias <- 5
# Criar categorias para as variáveis específicas
df$Duration_Categoria <- criar_categorias(df$Duration, num_categorias)
df$CreditAmount_Categoria <- criar_categorias(df$CreditAmount, num_categorias)
df$Age_Categoria <- criar_categorias(df$Age, num_categorias)
summary(df)
df <- read.csv("German_Credit_Card_UCI_-_dataset.csv")
head(df)
dim(df)
## Analisando os tipos das variáveis
str(df)
summary(df)
# - Como constatamos na fonte dos dados, as variáveis do tipo character são do tipo factor, precisa então ser convertidas.
## Convertendo as variáveis
# Selecione apenas as variáveis do tipo caractere para conversão
colunas_chr <- sapply(df, is.character)
# Converta as variáveis do tipo caractere e a última variável para fatores
df <- mutate_if(df, colunas_chr, as.factor)
df$X1.1 <- as.factor(df$X1.1)
str(df)
## Alterando o nome das variáveis (pesquisado na fonte)
names(df) <- c("CheckingAcctStat", "Duration", "CreditHistory", "Purpose", "CreditAmount", "SavingsBonds", "Employment",
"InstallmentRatePecnt", "SexAndStatus", "OtherDetorsGuarantors", "PresentResidenceTime", "Property", "Age",
"OtherInstallments", "Housing", "ExistingCreditsAtBank", "Job", "NumberDependents", "Telephone", "ForeignWorker", "CreditStatus")
head(df)
## Análise Exploratória (Engenharia de Atributos em Variáveis Numéricas)
# Calcular o número de valores únicos para cada variável
unique_values <- lapply(df, function(x) length(unique(x)))
# Exibir o número de valores únicos para cada variável
for (i in seq_along(unique_values)) {
cat("Variável:", names(unique_values)[i], "\n")
cat("Unique Values:", unique_values[[i]], "\n\n")
}
# - Através do código acima podemos constatar que as variáveis "Duration", "CreditAmount" e "Age" possuem muitos valores únicos.
# - E variáveis com uma grande quantidade de valores únicos podem apresentar problemas durante o trienamento de um Modelo de Classificação.
# - O que fazer neste caso?
#   Iremos converter essas três variáveis de Numéricas para Qualitativas (categóricas/factor)
# - Iremos então criar e colocar os dados destas variáveis em 4 ou 5 categorias diferentes
#   Exemplo: pegaremos a coluna "CreditAmount" que possui 921 valores únicos e colocaremos estes valores em categorias
# - Isto não é obrigatório. O fato de aplicar este tipo de engenharia de atributos neste dataset não significa que devemos aplicar me outro
## Aplicando Engenharia de Atributos em Variáveis Numéricas
# Carregando funções
source("src/ClassTools.R")
# Forma 1 (Intervalar)
# Criando 3 novas variáveis que foram transformadas de variáveis numéricas para variáveis categóricas com as funções de ClassTools.R
toFactors <- c("Duration", "CreditAmount", "Age")
maxVals <- c(100, 1000000, 100)
facNames <- unlist(lapply(toFactors, function(x) paste(x, "_f", sep = "")))
df[, facNames] <- Map(function(x, y) quantize.num(df[, x], maxval = y), toFactors, maxVals)
View(df)
str(df)
summary(df)
# Forma 2 (Discreta)
# Criando 3 novas variáveis que foram transformadas de variáveis numéricas para variáveis categóricas aqui
# Definir função para criar categorias
criar_categorias <- function(variavel, num_categorias) {
# Criar breakpoints para dividir a variável em categorias
breakpoints <- quantile(variavel, probs = seq(0, 1, length.out = num_categorias + 1))
# Criar categorias
categorias <- cut(variavel, breaks = breakpoints, labels = seq(1, num_categorias), include.lowest = TRUE)
return(categorias)
}
# Especificar o número de categorias desejado
num_categorias <- 5
# Criar categorias para as novas variáveis específicas
df$Duration_Categoria <- criar_categorias(df$Duration, num_categorias)
df$CreditAmount_Categoria <- criar_categorias(df$CreditAmount, num_categorias)
df$Age_Categoria <- criar_categorias(df$Age, num_categorias)
# Visualizar o resultado
head(df[c("Duration", "Duration_Categoria", "CreditAmount", "CreditAmount_Categoria", "Age", "Age_Categoria")])
head(df)
str(df)
summary(df)
head(df)
